{"version":3,"file":"component---src-templates-blog-post-js-0eaf4d1c9a33a2531f18.js","mappings":"kKAYMA,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,GAASC,EAAAA,EAAAA,gBAAe,cAAxBD,KAgBFE,EAAkBN,GAAeI,EAAKG,aAAaP,YACnDQ,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBJ,MAExC,OACE,gBAAC,IAAD,CACEM,eAAgB,CACdR,KAAAA,GAEFE,MAAOA,EACPO,cAAeF,EAAY,QAAWA,EAAiB,KACvDN,KAAM,CACJ,CACES,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAAST,GAEX,CACEU,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAAST,GAEX,CACEQ,KAAK,sBACLC,QAASN,IAEXU,OAAOd,MAKfH,EAAIkB,aAAe,CACjBhB,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,yHCIA,UApFyB,SAAC,GAAwB,IAAD,IAArBkB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKd,KAAKG,oBAAV,eAAwBJ,QAAxB,QACVoB,EAAmBL,EAAnBK,SAAUC,EAASN,EAATM,KACZC,EAAS,UAAGL,EAAKM,YAAYD,iBAApB,aAAG,EAA4BE,gBAAgBC,MAC9D,OACE,gBAAC,IAAD,CAAQT,SAAUA,EAAUhB,MAAOmB,GACjC,gBAAC,IAAD,CACEnB,MAAOiB,EAAKM,YAAYvB,MACxBH,YAAaoB,EAAKM,YAAY1B,aAAeoB,EAAKS,UAEpD,2BACEC,UAAU,YACVC,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYb,EAAKM,YAAYvB,OAC1C,yBAAIiB,EAAKM,YAAYQ,MACrB,uBAAKJ,UAAU,QACb,gBAAC,IAAD,CACEA,UAAU,wEACVF,MAAOH,EACPU,IAAI,iBAIPf,EAAKM,YAAYU,KAChB,uBAAKN,UAAU,kBACb,uBAAKA,UAAU,kBACb,sBAAIA,UAAU,WACXV,EAAKM,YAAYU,KAAKC,KAAI,SAACC,GAAD,OACzB,sBACEC,IAAKD,EAAG,MACRR,UAAU,uJAEV,gBAAC,MAAD,CAAOA,UAAU,2CACjB,gBAAC,EAAAU,KAAD,CAAMC,GAAE,SAAWC,GAAAA,CAAUJ,GAArB,KAA+BA,UAM/C,MAEN,2BACEK,wBAAyB,CAAEC,OAAQxB,EAAKyB,MACxCZ,SAAS,gBAEX,2BACA,8BACE,gBAAC,IAAD,QAGJ,uBAAKH,UAAU,iBACb,sBACEgB,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACG5B,GACC,gBAAC,EAAAiB,KAAD,CAAMC,GAAIlB,EAAS6B,OAAOC,KAAMC,IAAI,QAApC,KACK/B,EAASG,YAAYvB,QAI9B,0BACGqB,GACC,gBAAC,EAAAgB,KAAD,CAAMC,GAAIjB,EAAK4B,OAAOC,KAAMC,IAAI,QAC7B9B,EAAKE,YAAYvB,MADpB","sources":["webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n};\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default Seo;\n","import * as React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport { FaTag } from \"react-icons/fa\";\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\n// Utilities\nimport kebabCase from \"lodash/kebabCase\";\nimport Image from \"gatsby-image\";\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const { previous, next } = data;\n  const thumbnail = post.frontmatter.thumbnail?.childImageSharp.fluid;\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n          <div className=\"pb-5\">\n            <Image\n              className=\"object-none shadow rounded max-w-full h-auto align-middle border-none\"\n              fluid={thumbnail}\n              alt=\"Thumbnail画像\"\n            />\n          </div>\n\n          {post.frontmatter.tags ? (\n            <div className=\" flex flex-row\">\n              <div className=\"tags-container\">\n                <ul className=\"taglist\">\n                  {post.frontmatter.tags.map((tag) => (\n                    <li\n                      key={tag + `tag`}\n                      className=\"bg-blue-100 hover:bg-blue-200 text-blue-800 text-sm font-medium mr-2 px-1.5 py-1 rounded dark:bg-blue-200 dark:text-blue-800 dark:hover:bg-blue-300\"\n                    >\n                      <FaTag className=\"inline-flex mr-1 w-3 h-3 fill-blue-500\" />\n                      <Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          ) : null}\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n        thumbnail {\n          childImageSharp {\n            fluid(maxWidth: 1280) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["Seo","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","data","location","post","markdownRemark","siteTitle","previous","next","thumbnail","frontmatter","childImageSharp","fluid","excerpt","className","itemScope","itemType","itemProp","date","alt","tags","map","tag","key","Link","to","kebabCase","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}
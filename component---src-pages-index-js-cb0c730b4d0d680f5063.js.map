{"version":3,"file":"component---src-pages-index-js-cb0c730b4d0d680f5063.js","mappings":"gKAoDA,IAzCY,WAAO,IAAD,IACVA,GAAOC,EAAAA,EAAAA,gBAAe,cAiBtBC,EAAM,UAAGF,EAAKG,KAAKC,oBAAb,aAAG,EAAwBF,OAC3B,UAAGF,EAAKG,KAAKC,oBAAb,OAAG,EAAwBC,OAEvC,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAD,CACED,UAAU,kDACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,QAAS,GACTC,IAAI,kBANN,uBAQCV,MAAAA,OAAA,EAAAA,EAAQW,OACP,0BACGX,MAAAA,OAAA,EAAAA,EAAQY,UAAW,KADtB,Q,uDC/BFC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BhB,GAASF,EAAAA,EAAAA,gBAAe,cAAxBE,KAgBFiB,EAAkBJ,GAAeb,EAAKC,aAAaY,YACnDK,EAAY,UAAGlB,EAAKC,oBAAR,aAAG,EAAmBe,MAExC,OACE,gBAAC,IAAD,CACEG,eAAgB,CACdL,KAAAA,GAEFE,MAAOA,EACPI,cAAeF,EAAY,QAAWA,EAAiB,KACvDH,KAAM,CACJ,CACEL,KAAK,cACLW,QAASJ,GAEX,CACEK,SAAS,WACTD,QAASL,GAEX,CACEM,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACEX,KAAK,eACLW,QAAQ,WAEV,CACEX,KAAK,kBACLW,SAAS,UAAArB,EAAKC,oBAAL,mBAAmBC,cAAnB,eAA2BqB,UAA3B,IAEX,CACEb,KAAK,gBACLW,QAASL,GAEX,CACEN,KAAK,sBACLW,QAASJ,IAEXO,OAAOT,MAKfH,EAAIa,aAAe,CACjBX,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,kFCzBA,UA1DkB,SAAC,GAAwB,IAAD,EAArBhB,EAAqB,EAArBA,KAAM6B,EAAe,EAAfA,SACnBC,GAAY,UAAA9B,EAAKG,KAAKC,oBAAV,eAAwBe,QAAxB,QACZY,EAAQ/B,EAAKgC,kBAAkBC,MAErC,OAAqB,IAAjBF,EAAMG,OAEN,gBAAC,IAAD,CAAQL,SAAUA,EAAUV,MAAOW,GACjC,gBAAC,IAAD,CAAKX,MAAM,cACX,gBAAC,IAAD,MACA,uLAUJ,gBAAC,IAAD,CAAQU,SAAUA,EAAUV,MAAOW,GACjC,gBAAC,IAAD,CAAKX,MAAM,cACX,gBAAC,IAAD,MACA,sBAAIgB,MAAO,CAAEC,UAAU,SACpBL,EAAMM,KAAI,SAACC,GACV,IAAMnB,EAAQmB,EAAKC,YAAYpB,OAASmB,EAAKE,OAAOC,KAEpD,OACE,sBAAIC,IAAKJ,EAAKE,OAAOC,MACnB,2BACEnC,UAAU,iBACVqC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIR,EAAKE,OAAOC,KAAMM,SAAS,OACnC,wBAAMA,SAAS,YAAY5B,KAG/B,6BAAQmB,EAAKC,YAAYS,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAYvB,aAAesB,EAAKa,SAE/CJ,SAAS,0B","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `);\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author;\n  const social = data.site.siteMetadata?.social;\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"inline object-cover w-16 h-16 mr-2 rounded-full\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          {author?.summary || null}\n          {` `}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Bio;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n};\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default Seo;\n","import * as React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const posts = data.allMarkdownRemark.nodes;\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map((post) => {\n          const title = post.frontmatter.title || post.fields.slug;\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          );\n        })}\n      </ol>\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`;\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","quality","alt","name","summary","Seo","description","lang","meta","title","metaDescription","defaultTitle","htmlAttributes","titleTemplate","content","property","twitter","concat","defaultProps","location","siteTitle","posts","allMarkdownRemark","nodes","length","style","listStyle","map","post","frontmatter","fields","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","excerpt"],"sourceRoot":""}